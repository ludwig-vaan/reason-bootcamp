// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Modules$BasicProject = require("./Modules.bs.js");

function reverseNum(num) {
  var second = num % 10;
  var first = num / 10 | 0;
  return Caml_int32.imul(second, 10) + first | 0;
}

var foo = /* record */[/* contents */1];

foo[0] = 5;

function crossProduct(vector1, vector2) {
  var b3 = vector2[2];
  var b2 = vector2[1];
  var b1 = vector2[0];
  var a3 = vector1[2];
  var a2 = vector1[1];
  var a1 = vector1[0];
  return /* tuple */[
          Caml_int32.imul(a2, b3) - Caml_int32.imul(a3, b2) | 0,
          Caml_int32.imul(a3, b1) - Caml_int32.imul(a1, b3) | 0,
          Caml_int32.imul(a1, b2) - Caml_int32.imul(a2, b1) | 0
        ];
}

var result = "First " + String(3);

function cross(param, param$1) {
  var b3 = param$1[2];
  var b2 = param$1[1];
  var b1 = param$1[0];
  var a3 = param[2];
  var a2 = param[1];
  var a1 = param[0];
  return /* tuple */[
          Caml_int32.imul(a2, b3) - Caml_int32.imul(a3, b2) | 0,
          Caml_int32.imul(a3, b1) - Caml_int32.imul(a1, b3) | 0,
          Caml_int32.imul(a1, b2) - Caml_int32.imul(a2, b1) | 0
        ];
}

function addVectors(param, param$1) {
  return /* tuple */[
          param[0] + param$1[0] | 0,
          param[1] + param$1[1] | 0,
          param[2] + param$1[2] | 0
        ];
}

function isServerCode(code) {
  return (code / 100 | 0) === 5;
}

function isClientCode(code) {
  return (code / 100 | 0) === 5;
}

function emulateResponseResult(response) {
  if (typeof response === "number") {
    return "Loading";
  } else if (response.tag) {
    var response$1 = response[0];
    if (response$1[/* name */0] === "Vladimir Novick") {
      return "Howdy Vladimir";
    } else {
      return response$1[/* name */0];
    }
  } else {
    var code = response[1];
    var message = response[0];
    var exit = 0;
    var switcher = code - 494 | 0;
    if (switcher > 5 || switcher < 0) {
      if (switcher !== -50) {
        exit = 1;
      } else {
        return "No response" + message;
      }
    } else if (switcher !== 4) {
      return "nginx error: " + message;
    } else {
      exit = 1;
    }
    if (exit === 1) {
      if (isServerCode(code)) {
        return "Network Error: " + message;
      } else if (isClientCode(code)) {
        return "Client Code:" + message;
      } else {
        return "Unknown code: " + (String(code) + (" message: " + message));
      }
    }
    
  }
}

var greetings = "Greetings";

var helloWorld = "" + (String(greetings) + ", Vladimir");

console.log(Modules$BasicProject.$$Math[/* times */1](2, 3));

var tup = /* tuple */[
  1,
  3
];

var a = 1;

var cellestialDestinationTree = /* Node */[/* record */[
    /* value : record */[
      /* destinationName */"Mars",
      /* constellation */"Pisces",
      /* coordinates : record */[
        /* rA : tuple */[
          "20m",
          "14s",
          "00"
        ],
        /* dEc : tuple */[
          "51deg",
          "34m",
          "12"
        ]
      ]
    ],
    /* left : Node */[/* record */[
        /* value : record */[
          /* destinationName */"Mars",
          /* constellation */"Pisces",
          /* coordinates : record */[
            /* rA : tuple */[
              "20m",
              "14s",
              "00"
            ],
            /* dEc : tuple */[
              "51deg",
              "34m",
              "12"
            ]
          ]
        ],
        /* left : Node */[/* record */[
            /* value : record */[
              /* destinationName */"Mars",
              /* constellation */"Pisces",
              /* coordinates : record */[
                /* rA : tuple */[
                  "20m",
                  "14s",
                  "00"
                ],
                /* dEc : tuple */[
                  "51deg",
                  "34m",
                  "12"
                ]
              ]
            ],
            /* left : Empty */0,
            /* right : Empty */0
          ]],
        /* right : Empty */0
      ]],
    /* right : Node */[/* record */[
        /* value : record */[
          /* destinationName */"Mars",
          /* constellation */"Pisces",
          /* coordinates : record */[
            /* rA : tuple */[
              "20m",
              "14s",
              "00"
            ],
            /* dEc : tuple */[
              "51deg",
              "34m",
              "12"
            ]
          ]
        ],
        /* left : Empty */0,
        /* right : Node */[/* record */[
            /* value : record */[
              /* destinationName */"Mars",
              /* constellation */"Pisces",
              /* coordinates : record */[
                /* rA : tuple */[
                  "20m",
                  "14s",
                  "00"
                ],
                /* dEc : tuple */[
                  "51deg",
                  "34m",
                  "12"
                ]
              ]
            ],
            /* left : Empty */0,
            /* right : Empty */0
          ]]
      ]]
  ]];

exports.reverseNum = reverseNum;
exports.tup = tup;
exports.a = a;
exports.foo = foo;
exports.crossProduct = crossProduct;
exports.result = result;
exports.cross = cross;
exports.addVectors = addVectors;
exports.cellestialDestinationTree = cellestialDestinationTree;
exports.isServerCode = isServerCode;
exports.isClientCode = isClientCode;
exports.emulateResponseResult = emulateResponseResult;
exports.greetings = greetings;
exports.helloWorld = helloWorld;
/*  Not a pure module */
