// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function length(param) {
  if (param) {
    return 1 + length(param[1]) | 0;
  } else {
    return 0;
  }
}

List.sort(Caml_obj.caml_compare, /* :: */[
      7,
      /* :: */[
        2,
        /* :: */[
          4,
          /* :: */[
            5,
            /* [] */0
          ]
        ]
      ]
    ]);

function removeAll(value, _l) {
  while(true) {
    var l = _l;
    if (l) {
      var tail = l[1];
      var head = l[0];
      if (Caml_obj.caml_equal(head, value)) {
        _l = tail;
        continue ;
      } else {
        return /* :: */[
                head,
                removeAll(value, tail)
              ];
      }
    } else {
      return /* [] */0;
    }
  };
}

console.log(List.fold_left((function (a, b) {
            return a + b | 0;
          }), 0, /* :: */[
          1,
          /* :: */[
            2,
            /* :: */[
              3,
              /* [] */0
            ]
          ]
        ]));

function nth(_index, _l) {
  while(true) {
    var l = _l;
    var index = _index;
    if (l) {
      if (index <= 0) {
        return Caml_option.some(l[0]);
      } else {
        _l = l[1];
        _index = index - 1 | 0;
        continue ;
      }
    } else {
      return undefined;
    }
  };
}

var abc = /* Cons */[
  "s",
  /* Cons */[
    "b",
    /* Cons */[
      "c",
      /* Nil */0
    ]
  ]
];

var regularList = /* :: */[
  1,
  /* :: */[
    2,
    /* :: */[
      3,
      /* [] */0
    ]
  ]
];

exports.abc = abc;
exports.regularList = regularList;
exports.length = length;
exports.removeAll = removeAll;
exports.nth = nth;
/*  Not a pure module */
